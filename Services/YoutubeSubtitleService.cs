using System;
using System.Diagnostics;
using System.Text;
using System.Text.Json;
using YoutubeExplode;

namespace ReadVideo.Services.YoutubeManagement
{
    public class YoutubeSubtitleService : IYoutubeSubtitleService
    {
        public async Task<string> ExtractSubtitle(string videoId, string language)
        {
            try
            {
                
                // Create a new instance of YoutubeClient
                var youtube = new YoutubeClient();

                // Get the available subtitle tracks
                var tracks = await youtube.Videos.ClosedCaptions.GetManifestAsync(videoId);

                if (String.IsNullOrEmpty(language)) language = tracks.Tracks[0].Language.Code;
                
                // Select a track
                var trackInfo = tracks.GetByLanguage(language);//;?.WithAutoGenerated(false);

                if (trackInfo != null)
                {
                    // Get the actual subtitle track
                    var track = await youtube.Videos.ClosedCaptions.GetAsync(trackInfo);


                    List<SubtitleChunk> chunks = track.Captions.Where(caption => !String.IsNullOrEmpty(caption.Text.Trim())).Select(caption => new SubtitleChunk { Text = caption.Text, Offset = caption.Offset }).ToList();

                    // Convert the list of StructureB to a JSON string
                    return JsonSerializer.Serialize(chunks, new JsonSerializerOptions
                    {
                        WriteIndented = true // Optional: makes the JSON string more readable
                    });

                }

                return "";
            }
            catch (Exception)
            {

                throw;
            }
            
        }


    }

    internal class SubtitleChunk
    {
        public string Text { get; set; }
        public TimeSpan Offset { get; set; }
    }
}
